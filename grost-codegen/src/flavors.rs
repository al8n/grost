// use super::{Enum, Object};

/// The derive generator for the network flavor
pub mod network;

use crate::Object;

/// The derive generator trait, which is used to generate implementations for the
/// structs, enums, unions and interfaces which are generated by the [`SchemaGenerator`](super::SchemaGenerator).
pub trait FlavorGenerator {
  /// Returns the full qualify path to the flavor type.
  fn ty(&self) -> &syn::Type;

  /// Returns the name of the flavor this generator generates code for
  fn name(&self) -> &'static str;

  /// Derives the implementations for the object schema type
  fn derive_object(&self, struct_: &Object) -> Result<proc_macro2::TokenStream, syn::Error>;

  // /// Derives the implementations for the enum schema type
  // fn derive_enum(
  //   &self,
  //   path_to_grost: &syn::Path,
  //   enum_: &Enum,
  // ) -> Result<proc_macro2::TokenStream, syn::Error>;
}

impl<F: FlavorGenerator + ?Sized> FlavorGenerator for Box<F> {
  fn ty(&self) -> &syn::Type {
    self.as_ref().ty()
  }

  fn name(&self) -> &'static str {
    self.as_ref().name()
  }

  // fn derive_enum(
  //   &self,
  //   path_to_grost: &syn::Path,
  //   enum_: &Enum,
  // ) -> Result<proc_macro2::TokenStream, syn::Error> {
  //   self.as_ref().derive_enum(path_to_grost, enum_)
  // }

  fn derive_object(&self, struct_: &Object) -> Result<proc_macro2::TokenStream, syn::Error> {
    self.as_ref().derive_object(struct_)
  }
}
