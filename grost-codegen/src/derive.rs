use crate::Field;

use super::{Enum, Object};

/// The network flavor code generator
pub mod network;

/// The derive generator trait, which is used to generate implementations for the
/// structs, enums, unions and interfaces which are generated by the [`SchemaGenerator`](super::SchemaGenerator).
pub trait DeriveGenerator {
  type Error;

  /// Returns the full qualify path of the flavor type.
  fn ty(&self) -> &syn::Type;

  /// Sets the type of the flavor
  fn set_ty(&mut self, ty: syn::Type);

  /// Returns the name of the flavor this generator generates code for
  fn name(&self) -> &'static str;

  // /// Generates the field identifier
  // fn derive_field_identifier(
  //   &self,
  //   path_to_grost: &syn::Path,
  //   field: &Field,
  // ) -> proc_macro2::TokenStream;

  /// Derives the implementations for the object schema type
  fn derive_object(
    &self,
    path_to_grost: &syn::Path,
    struct_: &Object,
  ) -> Result<proc_macro2::TokenStream, Self::Error>;

  /// Derives the implementations for the enum schema type
  fn derive_enum(
    &self,
    path_to_grost: &syn::Path,
    enum_: &Enum,
  ) -> Result<proc_macro2::TokenStream, Self::Error>;
}

impl<F: DeriveGenerator + ?Sized> DeriveGenerator for Box<F> {
  type Error = F::Error;

  fn ty(&self) -> &syn::Type {
    self.as_ref().ty()
  }

  fn name(&self) -> &'static str {
    self.as_ref().name()
  }

  fn set_ty(&mut self, ty: syn::Type) {
    self.as_mut().set_ty(ty)
  }

  fn derive_enum(
    &self,
    path_to_grost: &syn::Path,
    enum_: &Enum,
  ) -> Result<proc_macro2::TokenStream, Self::Error> {
    self.as_ref().derive_enum(path_to_grost, enum_)
  }

  fn derive_object(
    &self,
    path_to_grost: &syn::Path,
    struct_: &Object,
  ) -> Result<proc_macro2::TokenStream, Self::Error> {
    self.as_ref().derive_object(path_to_grost, struct_)
  }
}
